<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>RISCOSSPlatformDataCollectorCode</web>
  <name>DataCollectorGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>xwiki:XWiki.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1430839815000</creationDate>
  <date>1442962337000</date>
  <contentUpdateDate>1442962337000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>/* -*- Mode:Java
 * Groovy code for data collectors.
 */
import java.io.File;
import org.json.JSONObject;
import org.json.JSONArray;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import org.json.JSONObject;
import java.util.concurrent.atomic.AtomicInteger;
import org.apache.commons.io.IOUtils;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.client.HttpClient;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.xwiki.environment.Environment;
import org.apache.commons.codec.net.URLCodec;

public class Ctx {

    static final int COLLECTOR_TIMEOUT_MILLISECONDS = 600000;

    final Object xwiki;
    final Object services;
    final Object xcontext;
    String maybeRDRInfo;
    final HashMap&lt;String, Long&gt; millisecondsByPeriod;

    Ctx(Object xwiki, Object services, Object xcontext, HashMap millisecondsByPeriod) {
        this.xwiki = xwiki;
        this.services = services;
        this.xcontext = xcontext;
        this.millisecondsByPeriod = millisecondsByPeriod;
    }
}

private Ctx mkCtx(Object xwiki, Object services, Object xcontext)
{
    return new Ctx(xwiki, services, xcontext,
        new HashMap&lt;String, Long&gt;() {{
            put("minutely", Long.valueOf(1000L * 60));
            put("hourly",   Long.valueOf(1000L * 60 * 60));
            put("daily",    Long.valueOf(1000L * 60 * 60 * 24));
            put("weekly",   Long.valueOf(1000L * 60 * 60 * 24 * 7));
            put("monthly",  Long.valueOf(1000L * 60 * 60 * 24 * 30));
        }});
}

private Object getValue(Object obj, String name) {
    def prop = obj.getProperty(name);
    if (!prop) { return null; }
    return prop.getValue();
}

private String getRDRInfo(Ctx ctx) {
    if (ctx.maybeRDRInfo == null) {
        def confDoc = ctx.xwiki.getDocument("RISCOSSPlatformCode.RISCOSSConfiguration");
        def conf = confDoc.getObject("RISCOSSPlatformCode.RISCOSSConfiguration");
        ctx.maybeRDRInfo = conf.getProperty("rdr").getValue();
    }
    return ctx.maybeRDRInfo;
}

public class CmdReturn {
    String stdout = "";
    String stderr = "";

    static final int retcode_TIMEOUT = (1&lt;&lt;31);
    int retcode;
}

private CmdReturn runCmd(Ctx ctx, String cmd, String stdin, Object wrkdir)
{
    System.out.println("debug: " + cmd + " &lt; " + stdin);

    final CmdReturn out = new CmdReturn();
    final AtomicInteger ai = new AtomicInteger(4);
    final Process[] process = new Process[1];

    new Thread(new Runnable() {public void run() {

        process[0] =
            new ProcessBuilder(Arrays.asList(cmd.split(" "))).directory(wrkdir).start();

        new Thread(new Runnable() {public void run() {
            out.stdout = IOUtils.toString(process[0].getInputStream(), "UTF-8");
            ai.decrementAndGet();
        } } ).start();
        new Thread(new Runnable() {public void run() {
            out.stderr = IOUtils.toString(process[0].getErrorStream(), "UTF-8");
            ai.decrementAndGet();
        } } ).start();
        new Thread(new Runnable() {public void run() {
            OutputStream stdinStream = process[0].getOutputStream();
            IOUtils.write(stdin, stdinStream, "UTF-8");
            stdinStream.close();
            ai.decrementAndGet();
        } } ).start();

        process[0].waitFor();
        out.retcode = process[0].exitValue();
        ai.decrementAndGet();
    }}).start();

    int waitMilliseconds = 0;
    while (ai.get() != 0) {
        Thread.sleep(10);
        waitMilliseconds += 10;
        if (waitMilliseconds &gt; Ctx.COLLECTOR_TIMEOUT_MILLISECONDS) {
            if (process[0] != null) {
                process[0].destroy();
            }
            System.out.println("warning: TIMEOUT " + cmd + " &lt; " + stdin);
            out.retcode = CmdReturn.retcode_TIMEOUT;
            return out;
        }
    }
    return out;
}

// Copied from EvaluateGroovy, keep in sync, TODO: fix
public File getAttachFile(Object services, Object xcontext, Object attachment)
{
    Object env = services.component.getInstance(Environment.class);
    File tempDir = env.getTemporaryDirectory();
    String encodedDocName = (new URLCodec()).encode(attachment.getDocument().getFullName());
    File dir = new File(tempDir, "riscoss-" + encodedDocName);
    String encodedFileName = (new URLCodec()).encode(attachment.getFilename());
    File file = new File(dir, encodedFileName);
    if (!dir.isDirectory()) {
        if (!dir.mkdir()) { throw new RuntimeException("failed to make directory"); }
    }
    if (file.exists() &amp;&amp; file.length() != attachment.getFilesize()) {
        file.delete();
    }
    if (!file.exists()) {
        def input = attachment.getAttachment().getContentInputStream(xcontext.getContext());
        Object output = new FileOutputStream(file);
        IOUtils.copy(input, output);
        IOUtils.closeQuietly(input);
        IOUtils.closeQuietly(output);
    }
    if (!file.exists()) { throw new RuntimeException("[" + file + "] nonexistant"); }
    if (file.length() != attachment.getFilesize()) {
        throw new RuntimeException("[" + file + "] wrong length: expected: [" +
            attachment.getFilesize() + "] got: [" + file.length() + "]");
    }
    return file;
}
// Copied from EvaluateGroovy, keep in sync, TODO: fix
public File getAttachDir(Object services, Object xcontext, Object collectorDoc)
{
    File file = new File(System.getProperty("user.dir"));
    for (def att : collectorDoc.getAttachmentList()) {
        file = getAttachFile(services, xcontext, att).getParentFile()
    }
    return file;
}

private int uploadToRDR(String output, String rdrPath) throws Exception
{
    HttpClient client = HttpClientBuilder.create().build();
    HttpPost request = new HttpPost(rdrPath);
    request.setEntity(new StringEntity(output));
    HttpResponse response = client.execute(request);
    int responseCode = response.getStatusLine().getStatusCode();
    System.out.println("Response Code : " + responseCode);
    BufferedReader rd = new BufferedReader(
      new InputStreamReader(response.getEntity().getContent()));
    StringBuffer result = new StringBuffer();
    String line = "";
    while ((line = rd.readLine()) != null) {
        System.err.println(line);
    }
    if (responseCode &lt; 200 || responseCode &gt; 299) {
        return responseCode;
    }
    return 0;
}

private List&lt;String&gt; getRiskConfigurations(Ctx ctx, Object entityDoc)
{
    String sql =
        "from doc.object(RISCOSSPlatformRiskConfigurationManagerCode.RiskConfigurationClass) " +
        "as conf, doc.object(RISCOSSPlatformRiskConfigurationManagerCode.RiskModelClass) " +
        "as model " +
        "where doc.space = 'RISCOSSPlatformRiskConfigurations' and " +
        "conf.autoEvaluate = 1 and model.layer = :layer";

    def entity = entityDoc.getObject("RISCOSSPlatformLayerManagerCode.EntityClass");
    String layer = getValue(entity, "layer");
    return ctx.services.query.xwql(sql).bindValue("layer", layer).execute();
}

private boolean runEvals(Ctx ctx, Object entityDoc)
{
    boolean ok = true;
    List&lt;String&gt; configs = getRiskConfigurations(ctx, entityDoc);
    if (configs.size() == 0) { return ok; }
    def EVAL_GROOVY_PG = "RISCOSSPlatformRiskAnalysisManagerCode.EvaluateGroovy";
    def analyserAPI = ctx.xwiki.parseGroovyFromPage(EVAL_GROOVY_PG);

    for (String config : configs) {
        def sessionDoc = analyserAPI.getSessionDoc(ctx.xwiki, entityDoc.getFullName(), config, true);
        def inputs = analyserAPI.getInputs(ctx.services, ctx.xwiki, sessionDoc);
System.out.println("xxx [" + inputs.getString("stdout") + "]");
        def riskData = analyserAPI.getRiskData(ctx.services,
                                               inputs,
                                               analyserAPI.getRDRPath(ctx.xwiki),
                                               entityDoc.getFullName());

        def interpretedData = analyserAPI.interpret(ctx.xcontext, sessionDoc, riskData);
        def out = analyserAPI.evaluate(ctx.services, ctx.xwiki, sessionDoc, interpretedData);
        def output = out.optJSONObject("output");
        def result = null;
        if (output != null) { result = output.optJSONObject("result"); }
        if (result == null) { ok = false; }
        analyserAPI.storeResults(
            sessionDoc, result, inputs, out, interpretedData, System.currentTimeMillis());
        println(out.getJSONObject("output").getJSONObject("result"));
    }
    return ok;
}

private void runJob(Ctx ctx, Object entityDoc, Object collectorConf, Object scheduleConf) {
    def collectorDoc = ctx.xwiki.getDocument(getValue(scheduleConf, "collectorName"));
    def collectorObj = collectorDoc.getObject("RISCOSSPlatformDataCollectorCode.DataCollectorClass");
    String command = getValue(collectorObj, "command");
    String repo = getValue(entityDoc, "website").replace("https://github.com/", "").replace(".git", "");
    String rdrPath = getRDRInfo(ctx);
    def out = new JSONObject();
    out.put("targetEntity", entityDoc.getName());
    out.put("repository", repo)
    out.put("timeLastRun", getValue(scheduleConf, "timeLastRun"));
    if (collectorConf != null) {
        for (String propName : collectorConf.getxWikiClass().getEnabledPropertyNames()) {
            String val = getValue(collectorConf, propName);
            if (val != null &amp;&amp; !"".equals(val)) {
                out.put(propName, val);
            }
        }
    }
    CmdReturn res = runCmd(
        ctx, command, out.toString(), getAttachDir(ctx.services, ctx.xcontext, collectorDoc));
    System.out.println("debug: stdout: " + res.stdout);
    System.out.println("debug: stderr: " + res.stderr);
    System.out.println("debug: retcode: " + res.retcode);
    if (res.retcode != 0) { return; }
    String stdout = res.stdout;
    if (stdout.indexOf("-----BEGIN RISK DATA-----") != -1) {
        stdout = stdout.substring(stdout.indexOf("-----BEGIN RISK DATA-----") +
            "-----BEGIN RISK DATA-----".length());
        stdout = stdout.substring(0, stdout.indexOf("-----END RISK DATA-----"));
    }
    if (!uploadToRDR(stdout, rdrPath) == 0) {
        return;
    /*} else if (!runEvals(ctx, entityDoc)) {  TODO: Make this work correctly.
        return; */
    } else {
        rescheduleJob(ctx, entityDoc, scheduleConf);
    }
}

private void rescheduleJob(Ctx ctx, Object doc, Object scheduleConf) {
    if(scheduleConf){
       scheduleConf.set("timeLastRun", System.currentTimeMillis());
       doc.saveWithProgrammingRights("Ran DataCollector", true);
    }
}

private void runSchedule(Ctx ctx, Object doc, Object scheduleConf) {
    Long timeLastRun = getValue(scheduleConf, "timeLastRun");
    if (timeLastRun == null) { timeLastRun = 0; }
    String name = getValue(scheduleConf, "collectorName");
    String fullName = doc.getFullName() + "/" + name;
    Long milliseconds = ctx.millisecondsByPeriod.get(getValue(scheduleConf, "frequency"));
    if (milliseconds == null) {
        System.out.println("warning: [" + fullName + "] invalid frequency [" +
            getValue(scheduleConf, "frequency") + "]");
        return;
    }
    if (System.currentTimeMillis() - timeLastRun &gt; milliseconds) {
        Object collectorConf = doc.getObject(name);
        if (scheduleConf == null) {
            System.out.println("warning: [" + fullName + "] no object");
            return;
        }
        try {
            runJob(ctx, doc, collectorConf, scheduleConf);
        } catch (Exception e) {
            System.out.println("warning: error running [" + fullName + "]");
            e.printStackTrace();
        }
    } else {
        System.out.println("debug: [" + fullName + "] skipping because it is not time yet.");
    }
}

/**
*   Run the data collector on demand (without the scheduler)
*/
public void runDataCollectorOnDemand(Object xcontext, Object services, Object xwiki, entityDocRef){
   Ctx ctx = mkCtx(xwiki, services, xcontext);
   def entityDoc = ctx.xwiki.getDocument(entityDocRef);
   def entityObj = entityDoc.getObject("RISCOSSPlatformLayers.OSSComponent");
   def collectorDoc = ctx.xwiki.getDocument("RISCOSSPlatformRiskDataCollectors.GitHub");
   def collectorObj = collectorDoc.getObject("RISCOSSPlatformDataCollectorCode.DataCollectorClass");
   def scheduleConf = null;
   String command = getValue(collectorObj, "command");
   String rdrPath = getRDRInfo(ctx);
   def out = new JSONObject();
   out.put("targetEntity", entityDoc.getName());

   String repo = getValue(entityObj, "website").replace("https://github.com/", "").replace(".git", "");
   out.put("repository", repo);

   CmdReturn res = runCmd(
        ctx, command, out.toString(), getAttachDir(ctx.services, ctx.xcontext, collectorDoc));
    System.out.println("debug: stdout: " + res.stdout);
    System.out.println("debug: stderr: " + res.stderr);
    System.out.println("debug: retcode: " + res.retcode);
    if (res.retcode != 0) { return; }
    String stdout = res.stdout;
    if (stdout.indexOf("-----BEGIN RISK DATA-----") != -1) {
        stdout = stdout.substring(stdout.indexOf("-----BEGIN RISK DATA-----") +
            "-----BEGIN RISK DATA-----".length());
        stdout = stdout.substring(0, stdout.indexOf("-----END RISK DATA-----"));
    }
    uploadToRDR(stdout, rdrPath);
}

private void runEntity(Ctx ctx, String docName) {

    def doc = ctx.xwiki.getDocument(docName);
    def scheduleConfs = doc.getObjects("RISCOSSPlatformDataCollectorCode.DataCollectorScheduler");
    for (int i = 0; i &lt; scheduleConfs.size(); i++) {
        runSchedule(ctx, doc, scheduleConfs.get(i));
    }
}

public void main(Object xcontext, Object services, Object xwiki) {
    Ctx ctx = mkCtx(xwiki, services, xcontext);
    def docNames = ctx.services.query.xwql(
            "from doc.object('RISCOSSPlatformDataCollectorCode.DataCollectorScheduler') as sched"
        ).execute();
    def dox = new ArrayList();
    for (int i = 0; i &lt; docNames.size(); i++) {
        runEntity(ctx, docNames.get(i));
    }
}
</content>
</xwikidoc>
